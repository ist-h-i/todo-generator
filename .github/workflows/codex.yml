# .github/workflows/codex.yml
name: Codex Auto Dev

on:
  workflow_dispatch:
    inputs:
      task_input:
        description: Codex パイプラインへ渡すタスク内容（省略時はデフォルト文言）
        required: false
  issues:
    types: [opened]
  issue_comment:
    types: [created]

concurrency:
  group: codex-auto-dev-${{ github.event_name }}-${{ github.event.issue.number || github.ref || 'manual' }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  codex:
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (
        (github.event_name == 'issues') &&
        contains(fromJson('["OWNER","MEMBER","COLLABORATOR"]'), github.event.issue.author_association)
      ) ||
      (
        (github.event_name == 'issue_comment') &&
        startsWith(github.event.comment.body, '/codex ') &&
        contains(fromJson('["OWNER","MEMBER","COLLABORATOR"]'), github.event.comment.author_association)
      )
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify OpenAI API key
        run: |
          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "::error::OPENAI_API_KEY is not available. Maintainers: set repository secret."
            exit 1
          fi

      - name: Setup Node (optional)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Setup Python deps (optional)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install OpenAI SDK (optional)
        run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.40.0" || true

      - name: Ensure codex CLI
        run: |
          if ! command -v codex >/dev/null 2>&1; then
            echo "::error::'codex' CLI not found in PATH. Ensure it is available or add an installation step."
            exit 1
          fi

      - name: Compose TASK_INPUT and run pipeline
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          RAW_TASK_INPUT="$(python <<'PY'
import json
import os
import sys

event_name = os.environ.get("GITHUB_EVENT_NAME", "")
event_path = os.environ.get("GITHUB_EVENT_PATH")

if not event_path:
    sys.exit("GITHUB_EVENT_PATH is not set")

with open(event_path, encoding="utf-8") as payload:
    event = json.load(payload)

def coerce_text(value):
    if value in (None, ""):
        return ""
    return str(value)

if event_name == "issues":
    issue = event.get("issue", {})
    title = coerce_text(issue.get("title"))
    body = coerce_text(issue.get("body"))
    task_input = f"{title}: {body}" if body else title
elif event_name == "issue_comment":
    comment = event.get("comment", {})
    task_input = coerce_text(comment.get("body"))
else:
    inputs = event.get("inputs") or {}
    task_input = coerce_text(inputs.get("task_input"))
    if not task_input:
        task_input = "Manual trigger: Please implement the requested feature."

print(task_input.strip())
PY
)"

          if [ -z "$RAW_TASK_INPUT" ]; then
            echo "::error::TASK_INPUT resolved to an empty string."
            exit 1
          fi

          echo "TASK_INPUT: $(printf '%s' "$RAW_TASK_INPUT" | head -c 200)${RAW_TASK_INPUT:+...}"
          mkdir -p codex_output

          printf '%s' "$RAW_TASK_INPUT" | ./scripts/run_codex_pipeline.sh

      - name: Upload Codex outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex-agent-outputs
          path: codex_output
          retention-days: 7
