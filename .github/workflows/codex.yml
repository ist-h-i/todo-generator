# .github/workflows/codex.yml
name: Codex Auto Dev

on:
  workflow_dispatch:
    inputs:
      task_input:
        description: Codex パイプラインへ渡すタスク内容（省略時はデフォルト文言）
        required: false
  issues:
    types: [opened]
  issue_comment:
    types: [created]

concurrency:
  group: codex-auto-dev-${{ github.event_name }}-${{ github.event.issue.number || github.ref || 'manual' }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  codex:
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (
        (github.event_name == 'issues') &&
        contains(fromJson('["OWNER","MEMBER","COLLABORATOR"]'), github.event.issue.author_association)
      ) ||
      (
        (github.event_name == 'issue_comment') &&
        startsWith(github.event.comment.body, '/codex ') &&
        contains(fromJson('["OWNER","MEMBER","COLLABORATOR"]'), github.event.comment.author_association)
      )
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CODEX_NPM_PKG: "@openai/codex"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Codex CLI
        run: |
          npm i -g ${CODEX_NPM_PKG:-@openai/codex}@0.39.0
          codex --version

      - name: Restore ChatGPT auth (no API key)
        env:
          CODEX_AUTH_JSON_B64: ${{ secrets.CODEX_AUTH_JSON_B64 }}
        run: |
          set -euo pipefail
          test -n "${CODEX_AUTH_JSON_B64:-}" || { echo "::error::Missing secret CODEX_AUTH_JSON_B64"; exit 1; }
          mkdir -p "$HOME/.codex"
          printf '%s' "$CODEX_AUTH_JSON_B64" | base64 -d > "$HOME/.codex/auth.json"
          chmod 600 "$HOME/.codex/auth.json"
          # ChatGPT認証を優先
          printf 'preferred_auth_method = "chatgpt"\n' > "$HOME/.codex/config.toml"
          # 確認
          codex --version || exit 1

      - name: Check PATH and codex
        run: |
          which codex || true
          codex --version || true
          npx -y ${CODEX_NPM_PKG:-@openai/codex}@0.39.0 --version || true

      - name: Resolve TASK_INPUT
        id: resolve_task_input
        run: |
          python <<'PY'
          import json, os, sys, uuid
          event_name = os.environ.get("GITHUB_EVENT_NAME","")
          event_path = os.environ.get("GITHUB_EVENT_PATH")
          if not event_path:
              print("::error::GITHUB_EVENT_PATH is not set.", file=sys.stderr); sys.exit(1)
          with open(event_path, encoding="utf-8") as f: event = json.load(f)
          def coerce(v): return "" if v is None else str(v)
          task_input = ""
          if event_name == "issues":
              issue = event.get("issue") or {}
              title = coerce(issue.get("title")).strip()
              body = coerce(issue.get("body")).strip()
              task_input = "\n\n".join([p for p in (title, body) if p])
          elif event_name == "issue_comment":
              comment = event.get("comment") or {}
              body = coerce(comment.get("body"))
              t = body.lstrip()
              task_input = (t[len("/codex"):].lstrip() if t.lower().startswith("/codex") else body).strip()
          else:
              inputs = event.get("inputs") or {}
              task_input = coerce(inputs.get("task_input")).strip() or "Manual trigger: Please implement the requested feature."
          if not task_input:
              print("::error::Resolved TASK_INPUT is empty.", file=sys.stderr); sys.exit(1)
          preview = task_input.replace("\r"," ").replace("\n"," ")
          print(f"TASK_INPUT preview: {preview[:200]}{'...' if len(preview)>200 else ''}")
          marker = f"EOF_{uuid.uuid4().hex}"
          with open(os.environ["GITHUB_OUTPUT"],"a",encoding="utf-8") as o:
              o.write(f"task_input<<{marker}\n{task_input}\n{marker}\n")
          with open(os.environ["GITHUB_ENV"],"a",encoding="utf-8") as e:
              e.write(f"TASK_INPUT<<{marker}\n{task_input}\n{marker}\n")
          PY

      - name: Run Codex pipeline
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          test -n "${TASK_INPUT:-}" || { echo "::error::TASK_INPUT is not available."; exit 1; }
          echo "TASK_INPUT: $(printf '%s' "${TASK_INPUT}" | tr '\n' ' ' | head -c 200)${TASK_INPUT:+...}"
          mkdir -p codex_output
          printf '%s' "${TASK_INPUT}" | ./scripts/run_codex_pipeline.sh

      - name: Upload Codex outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex-agent-outputs
          path: codex_output
          retention-days: 7
