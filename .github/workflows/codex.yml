# .github/workflows/codex.yml
name: Codex Auto Dev

on:
  workflow_dispatch:
    inputs:
      task_input:
        description: Codex パイプラインへ渡すタスク内容（省略時はデフォルト文言）
        required: false
  issues:
    types: [opened, edited]

concurrency:
  group: codex-auto-dev-${{ github.event_name }}-${{ github.event.issue.number || github.ref || 'manual' }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  codex:
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' &&
       contains(fromJson('["OWNER","MEMBER","COLLABORATOR"]'), github.event.issue.author_association))
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CODEX_NPM_PKG: "@openai/codex"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect trigger and compose TASK_INPUT
        id: detect
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import json, os, sys, uuid
          name = os.environ.get("GITHUB_EVENT_NAME","")
          path = os.environ.get("GITHUB_EVENT_PATH")
          if not path:
              print("::error::GITHUB_EVENT_PATH is not set."); sys.exit(1)
          with open(path, encoding="utf-8") as f:
              event = json.load(f)

          def out(k, v):
              go = os.environ["GITHUB_OUTPUT"]
              if "\n" in v:
                  m = f"EOF_{uuid.uuid4().hex}"
                  with open(go, "a", encoding="utf-8") as g:
                      g.write(f"{k}<<{m}\n{v}\n{m}\n")
              else:
                  with open(go, "a", encoding="utf-8") as g:
                      g.write(f"{k}={v}\n")

          def coerce(x): return "" if x is None else str(x)

          if name == "workflow_dispatch":
              inputs = event.get("inputs") or {}
              task = coerce(inputs.get("task_input")).strip() or "Manual trigger: Please implement the requested feature."
              out("run_codex","true"); out("task_input", task)
          elif name == "issues":
              issue = event.get("issue") or {}
              title = coerce(issue.get("title")).strip()
              body  = coerce(issue.get("body")).strip()
              task = "\n\n".join([p for p in (title, body) if p]).strip()
              if not task:
                  print("::error::Resolved TASK_INPUT is empty for issues."); sys.exit(1)
              out("run_codex","true"); out("task_input", task); out("issue_number", coerce(issue.get("number")))
          else:
              print("::error::Unsupported event."); sys.exit(1)

          preview = task.replace("\n"," ").replace("\r"," ")
          print(f"TASK_INPUT preview: {preview[:200]}{'...' if len(preview)>200 else ''}")
          PY

      - name: Install Codex CLI
        if: ${{ steps.detect.outputs.run_codex == 'true' }}
        run: |
          npm i -g ${CODEX_NPM_PKG:-@openai/codex}@0.39.0
          codex --version

      - name: Restore ChatGPT auth (no API key)
        if: ${{ steps.detect.outputs.run_codex == 'true' }}
        env:
          CODEX_AUTH_JSON_B64: ${{ secrets.CODEX_AUTH_JSON_B64 }}
        run: |
          set -euo pipefail
          test -n "${CODEX_AUTH_JSON_B64:-}" || { echo "::error::Missing secret CODEX_AUTH_JSON_B64"; exit 1; }
          mkdir -p "$HOME/.codex"
          printf '%s' "$CODEX_AUTH_JSON_B64" | base64 -d > "$HOME/.codex/auth.json"
          chmod 600 "$HOME/.codex/auth.json"
          echo 'preferred_auth_method = "chatgpt"' > "$HOME/.codex/config.toml"
          codex --version

      - name: Run Codex pipeline
        if: ${{ steps.detect.outputs.run_codex == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TASK_INPUT="${{ steps.detect.outputs.task_input }}"
          test -n "${TASK_INPUT:-}" || { echo "::error::TASK_INPUT is not available."; exit 1; }
          echo "TASK_INPUT: $(printf '%s' "${TASK_INPUT}" | tr '\n' ' ' | head -c 200)${TASK_INPUT:+...}"
          mkdir -p codex_output
          printf '%s' "${TASK_INPUT}" | ./scripts/run_codex_pipeline.sh

      - name: Upload Codex outputs
        if: ${{ always() && steps.detect.outputs.run_codex == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: codex-agent-outputs
          path: codex_output
          retention-days: 7

      - name: Check repository diff
        if: ${{ steps.detect.outputs.run_codex == 'true' }}
        id: diff
        run: |
          set -euo pipefail
          if [ -z "$(git status --porcelain)" ]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request
        if: ${{ steps.detect.outputs.run_codex == 'true' && steps.diff.outputs.changed == 'true' }}
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: codex/${{ github.run_id }}
          base: ${{ github.event.repository.default_branch }}
          commit-message: "chore(codex): apply generated changes"
          title: >-
            Codex: ${{
              github.event_name == 'issues' && format('issue #{0}', steps.detect.outputs.issue_number) ||
              'manual run'
            }}
          body: |
            Task input:

            ```
            ${{ steps.detect.outputs.task_input }}
            ```
          delete-branch: true

      - name: Comment work report to issue
        if: ${{ steps.detect.outputs.run_codex == 'true' && steps.diff.outputs.changed == 'true' && github.event_name == 'issues' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = Number("${{ steps.detect.outputs.issue_number }}");
            const prUrl = "${{ steps.cpr.outputs.pull-request-url }}";
            const prNumber = Number("${{ steps.cpr.outputs.pull-request-number }}");
            const body = [
              "Automated work completed by Codex.",
              "",
              `- Created PR: #${prNumber} (${prUrl})`,
              "- Artifacts: attached as workflow artifact `codex-agent-outputs`",
              "",
              "Task input:",
              "```",
              `${{ steps.detect.outputs.task_input }}`,
              "```"
            ].join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body
            });

      - name: Enforce completion condition
        if: ${{ steps.detect.outputs.run_codex == 'true' && steps.diff.outputs.changed != 'true' }}
        run: |
          echo "::error::No changes detected. PR was not created, so completion conditions are not met."
          exit 1
