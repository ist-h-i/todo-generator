# .github/workflows/codex.yml
name: Codex Auto Dev

on:
  workflow_dispatch:
    inputs:
      task_input:
        description: Codex パイプラインへ渡すタスク内容（省略時はデフォルト文言）
        required: false
  issues:
    types: [opened]
  issue_comment:
    types: [created]

concurrency:
  group: codex-auto-dev-${{ github.event_name }}-${{ github.event.issue.number || github.ref || 'manual' }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  codex:
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (
        (github.event_name == 'issues') &&
        contains(fromJson('["OWNER","MEMBER","COLLABORATOR"]'), github.event.issue.author_association)
      ) ||
      (
        (github.event_name == 'issue_comment') &&
        startsWith(github.event.comment.body, '/codex ') &&
        contains(fromJson('["OWNER","MEMBER","COLLABORATOR"]'), github.event.comment.author_association)
      )
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      CODEX_PY_PKG: "codex-cli"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify OpenAI API key
        run: |
          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "::error::OPENAI_API_KEY is not available. Maintainers: set repository secret."
            exit 1
          fi

      - name: Setup Node (optional)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Python (optional)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Codex CLI
        run: |
          set -eux

          python -m pip install -U pip
          python -m pip install --user "${CODEX_PY_PKG:-codex-cli}"

          codex_bin="$(python -m site --user-base)/bin"
          echo "${codex_bin}" >> "$GITHUB_PATH"

          if ! command -v codex >/dev/null 2>&1; then
            echo "::error::codex CLI is unavailable after installation."
            exit 1
          fi

          codex --version

      - name: Resolve TASK_INPUT
        id: resolve_task_input
        run: |
          python <<'PY'
          import json
          import os
          import sys
          import uuid

          event_name = os.environ.get("GITHUB_EVENT_NAME", "")
          event_path = os.environ.get("GITHUB_EVENT_PATH")

          if not event_path:
              print("::error::GITHUB_EVENT_PATH is not set.", file=sys.stderr)
              sys.exit(1)

          with open(event_path, encoding="utf-8") as payload:
              event = json.load(payload)

          def coerce(value: object) -> str:
              if value is None:
                  return ""
              return str(value)

          task_input = ""

          if event_name == "issues":
              issue = event.get("issue") or {}
              title = coerce(issue.get("title")).strip()
              body = coerce(issue.get("body")).strip()
              parts = [part for part in (title, body) if part]
              task_input = "\n\n".join(parts)
          elif event_name == "issue_comment":
              comment = event.get("comment") or {}
              body = coerce(comment.get("body"))
              trimmed = body.lstrip()
              if trimmed.lower().startswith("/codex"):
                  remainder = trimmed[len("/codex"):].lstrip()
              else:
                  remainder = body
              task_input = remainder.strip()
          else:
              inputs = event.get("inputs") or {}
              task_input = coerce(inputs.get("task_input")).strip()
              if not task_input:
                  task_input = "Manual trigger: Please implement the requested feature."

          if not task_input:
              print("::error::Resolved TASK_INPUT is empty.", file=sys.stderr)
              sys.exit(1)

          preview = task_input.replace("\r", " ").replace("\n", " ")
          print(f"TASK_INPUT preview: {preview[:200]}{'...' if len(preview) > 200 else ''}")

          marker = f"EOF_{uuid.uuid4().hex}"

          github_output = os.environ.get("GITHUB_OUTPUT")
          if github_output:
              with open(github_output, "a", encoding="utf-8") as output_file:
                  output_file.write(f"task_input<<{marker}\n{task_input}\n{marker}\n")

          github_env = os.environ.get("GITHUB_ENV")
          if github_env:
              with open(github_env, "a", encoding="utf-8") as env_file:
                  env_file.write(f"TASK_INPUT<<{marker}\n{task_input}\n{marker}\n")
          PY

      - name: Run Codex pipeline
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          if [ -z "${TASK_INPUT:-}" ]; then
            echo "::error::TASK_INPUT is not available for the pipeline step."
            exit 1
          fi

          echo "TASK_INPUT: $(printf '%s' "${TASK_INPUT}" | tr '\n' ' ' | head -c 200)${TASK_INPUT:+...}"
          mkdir -p codex_output

          printf '%s' "${TASK_INPUT}" | ./scripts/run_codex_pipeline.sh

      - name: Upload Codex outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex-agent-outputs
          path: codex_output
          retention-days: 7
