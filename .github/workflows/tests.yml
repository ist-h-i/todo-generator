name: Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'package*.json'
      - 'requirements*.txt'
      - '.github/workflows/tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'package*.json'
      - 'requirements*.txt'
      - '.github/workflows/tests.yml'

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    if: ${{ github.event_name == 'push' || !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      pull-requests: read
    env:
      FRONTEND_COV_MIN: 80
      BACKEND_COV_MIN: 80

    steps:
      - uses: actions/checkout@v4

      - name: Resolve Node cache paths
        id: node-cache
        run: |
          paths=()
          if [ -f package-lock.json ]; then
            paths+=("package-lock.json")
          fi
          if [ -f frontend/package-lock.json ]; then
            paths+=("frontend/package-lock.json")
          fi
          if [ ${#paths[@]} -gt 0 ]; then
            {
              echo "paths<<EOF"
              printf '%s\n' "${paths[@]}"
              echo "EOF"
              echo "cache=npm"
            } >> "${GITHUB_OUTPUT}"
          else
            {
              echo "paths="
              echo "cache="
            } >> "${GITHUB_OUTPUT}"
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ steps.node-cache.outputs.cache }}
          cache-dependency-path: ${{ steps.node-cache.outputs.paths }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            backend/requirements.txt

      - name: Setup Chrome (for Angular/Karma)
        if: ${{ hashFiles('frontend/package.json') != '' || (hashFiles('package.json') != '' && contains(github.event.head_commit.message, '@angular')) }}
        id: chrome
        uses: browser-actions/setup-chrome@v1

      - name: Frontend test
        if: ${{ hashFiles('frontend/package.json') != '' || hashFiles('package.json') != '' }}
        env:
          CHROME_BIN: ${{ steps.chrome.outputs.chrome-path }}
        run: |
          set -e
          if [ -f frontend/package.json ]; then
            pushd frontend > /dev/null
            npm ci
            if [ -f karma.conf.cjs ] || [ -f karma.conf.js ]; then
              npx ng test --watch=false --browsers=ChromeHeadlessNoSandbox --code-coverage || (echo "Retry once..." && npx ng test --watch=false --browsers=ChromeHeadlessNoSandbox --code-coverage)
            else
              echo "No Karma config. Skipping Angular unit tests."
            fi
            popd > /dev/null
          elif [ -f package.json ] && grep -q "\"@angular/" package.json 2>/dev/null; then
            npm ci
            npx ng test --watch=false --browsers=ChromeHeadlessNoSandbox --code-coverage || (echo "Retry once..." && npx ng test --watch=false --browsers=ChromeHeadlessNoSandbox --code-coverage)
          fi

      - name: Backend test
        run: |
          set -e
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt pytest-cov
            pushd backend > /dev/null
            pytest --maxfail=1 --cov=. --cov-report=xml:coverage.xml || (echo "Retry once..." && pytest --maxfail=1 --cov=. --cov-report=xml:coverage.xml)
            popd > /dev/null
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt pytest-cov
            pytest --maxfail=1 --cov=. --cov-report=xml:coverage.xml || (echo "Retry once..." && pytest --maxfail=1 --cov=. --cov-report=xml:coverage.xml)
          else
            echo "No Python backend. Skipping."
          fi

      - name: Check coverage thresholds
        run: |
          fail=false
          # Frontend lcov
          if [ -f frontend/coverage/lcov.info ]; then
            total=$(grep -oP '^DA:\d+,\d+' frontend/coverage/lcov.info | wc -l | tr -d ' ')
            hits=$(grep -oP '^DA:\d+,(\d+)' frontend/coverage/lcov.info | awk -F',' '$2>0{c++} END{print c+0}')
            if [ "${total}" -gt 0 ]; then
              pct=$(awk -v h="$hits" -v t="$total" 'BEGIN{printf "%.2f", (h/t)*100}')
              echo "Frontend coverage: ${pct}% (min ${FRONTEND_COV_MIN}%)"
              awk -v p="$pct" -v m="$FRONTEND_COV_MIN" 'BEGIN{exit (p+0 < m+0)}' || fail=true
            fi
          fi
          # Backend coverage.xml (coverage.py)
          if [ -f backend/coverage.xml ]; then
            rate=$(grep -o 'line-rate="[^"]*"' backend/coverage.xml | head -1 | sed 's/.*="//; s/".*//')
            pct=$(awk -v r="$rate" 'BEGIN{printf "%.2f", r*100}')
            echo "Backend coverage: ${pct}% (min ${BACKEND_COV_MIN}%)"
            awk -v p="$pct" -v m="$BACKEND_COV_MIN" 'BEGIN{exit (p+0 < m+0)}' || fail=true
          elif [ -f coverage.xml ]; then
            rate=$(grep -o 'line-rate="[^"]*"' coverage.xml | head -1 | sed 's/.*="//; s/".*//')
            pct=$(awk -v r="$rate" 'BEGIN{printf "%.2f", r*100}')
            echo "Backend coverage: ${pct}% (min ${BACKEND_COV_MIN}%)"
            awk -v p="$pct" -v m="$BACKEND_COV_MIN" 'BEGIN{exit (p+0 < m+0)}' || fail=true
          fi
          if [ "$fail" = true ]; then
            echo "Coverage below threshold"; exit 1
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            frontend/coverage/**
            backend/coverage.xml
            coverage.xml
          retention-days: 7
          if-no-files-found: ignore
