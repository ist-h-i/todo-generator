# .github/workflows/auto-resolve-pr.yml
name: Auto Resolve Conflicts

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/workflows/**'

concurrency:
  group: auto-resolve-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  auto-resolve:
    if: ${{ !github.event.pull_request.draft && !github.event.pull_request.head.repo.fork }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Merge base branch into PR (no commit yet)
        run: |
          git fetch origin ${{ github.base_ref }}
          git merge --no-commit --no-ff origin/${{ github.base_ref }} || true

      # --- Node/Python/Chrome 等は現状どおり（省略可：下に続く） ---
      - name: Set up Node.js (with cache)
        if: ${{ hashFiles('frontend/package-lock.json','frontend/npm-shrinkwrap.json','frontend/yarn.lock') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            frontend/package-lock.json

      - name: Set up Node.js (no cache)
        if: ${{ hashFiles('frontend/package-lock.json','frontend/npm-shrinkwrap.json','frontend/yarn.lock') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install root deps
        if: ${{ hashFiles('package.json') != '' }}
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      - name: Install frontend deps
        if: ${{ hashFiles('frontend/package.json') != '' }}
        run: |
          pushd frontend >/dev/null
          if [ -f package-lock.json ]; then npm ci; else npm i; fi
          popd >/dev/null

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            backend/requirements.txt

      - name: Set up Chrome only when Karma runs
        if: ${{ hashFiles('frontend/karma.conf.*','karma.conf.*') != '' }}
        id: setup-chrome
        uses: browser-actions/setup-chrome@v1

      # --- ここから Codex（ChatGPT認証）で自動解消 ---
      - name: Install Codex CLI
        run: |
          npm i -g @openai/codex@0.39.0
          codex --version

      - name: Restore ChatGPT auth (no API key)
        env:
          CODEX_AUTH_JSON_B64: ${{ secrets.CODEX_AUTH_JSON_B64 }}
        run: |
          set -euo pipefail
          test -n "${CODEX_AUTH_JSON_B64:-}" || { echo "::error::Missing secret CODEX_AUTH_JSON_B64"; exit 1; }
          mkdir -p "$HOME/.codex"
          echo "$CODEX_AUTH_JSON_B64" | base64 -d > "$HOME/.codex/auth.json"
          chmod 600 "$HOME/.codex/auth.json"
          printf 'preferred_auth_method = "chatgpt"\n' > "$HOME/.codex/config.toml"

      - name: Auto-resolve conflicts via Codex
        run: |
          set -euo pipefail
          # 衝突が無ければ早期終了
          if ! git diff --name-only --diff-filter=U | grep . >/dev/null; then
            echo "No conflicts."
            exit 0
          fi
          # 指示をCodexに渡してワークツリーを書き換え＆ステージ
          codex exec --quiet --sandbox workspace-write <<'TXT'
          Resolve all Git merge conflicts currently present in the repository.
          Rules:
          - Edit files in-place. Remove all conflict markers (<<<<<<<, =======, >>>>>>>).
          - Preserve surrounding context and project conventions.
          - Run any minimal steps needed to ensure syntax/types build.
          - After editing, stage updated files: `git add <files>`.
          - Do NOT commit.
          Return a short summary of touched files.
          TXT

                - name: Verify conflicts are resolved
                  run: |
                    if git diff --name-only --diff-filter=U | grep .; then
                      echo "::error::Unresolved conflicts remain."
                      exit 1
                    fi

      # --- Tests（元のまま） ---
      - name: Run Tests
        env:
          CHROME_BIN: ${{ steps.setup-chrome.outputs.chrome-path }}
          CI: true
        run: |
          set -e
          ran_tests=false
          if [ -f frontend/package.json ]; then
            ran_tests=true
            pushd frontend >/dev/null
            if [ -f karma.conf.cjs ] || [ -f karma.conf.js ] || [ -f karma.conf.mjs ]; then
              if grep -q "ChromeHeadlessNoSandbox" karma.conf.* 2>/dev/null; then
                npx ng test --watch=false --browsers=ChromeHeadlessNoSandbox --code-coverage \
                || (echo "Retry once..." && npx ng test --watch=false --browsers=ChromeHeadlessNoSandbox --code-coverage)
              else
                npx ng test --watch=false --browsers=ChromeHeadless --code-coverage \
                || (echo "Retry once..." && npx ng test --watch=false --browsers=ChromeHeadless --code-coverage)
              fi
            else
              echo "No Karma config. Skipping frontend unit tests."
            fi
            popd >/dev/null
          elif [ -f package.json ] && grep -q "\"@angular/" package.json 2>/dev/null; then
            ran_tests=true
            npx ng test --watch=false --browsers=ChromeHeadless --code-coverage \
            || (echo "Retry once..." && npx ng test --watch=false --browsers=ChromeHeadless --code-coverage)
          fi

          if [ -f backend/requirements.txt ]; then
            ran_tests=true
            pip install -r backend/requirements.txt
            pushd backend >/dev/null
            pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=xml:coverage.xml \
            || (echo "Retry once..." && pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=xml:coverage.xml)
            popd >/dev/null
          elif [ -f requirements.txt ]; then
            ran_tests=true
            pip install -r requirements.txt
            pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=xml:coverage.xml \
            || (echo "Retry once..." && pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=xml:coverage.xml)
          fi

          if [ "$ran_tests" = false ]; then
            echo "No test framework detected. Skipping."
          fi

      - name: Upload test reports (best-effort)
        if: always()
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: test-artifacts
          path: |
            frontend/coverage/**
            backend/coverage.xml
            coverage.xml
          retention-days: 7
          if-no-files-found: ignore

      - name: Commit & Push if tests pass
        if: success()
        run: |
          git config --global user.name "merge-bot"
          git config --global user.email "merge-bot@example.com"
          git add -A
          if git rev-parse -q --verify MERGE_HEAD >/dev/null; then
            git commit -m "🤖 auto-resolved merge (tests passed)"
          else
            git commit -m "[skip ci] 🤖 auto-resolved changes (tests passed)" || echo "No changes to commit"
          fi
          git push origin HEAD:${{ github.head_ref }}
